{"version":3,"sources":["graph.js","utils.js","rating-display.js","App.js","index.js"],"names":["Chart","register","Zoom","options","scales","x","type","time","unit","grid","display","plugins","zoom","wheel","enabled","pinch","mode","pan","limits","min","max","Date","now","minRange","y","RatingGraph","datasets","progress","length","total","className","done","data","width","height","fetch_retry","url","n","a","i","fetch","resp","ok","json","status","Promise","reject","Error","getRatings","handlesStr","setDatasets","setProgress","ratings","invalidHandles","handles","split","cnt","handle","then","push","result","console","error","alert","join","makeDataset","colorSchemeOri","colorScheme","slice","dataset","rating","borderColor","pop","label","parsing","contest","ratingUpdateTimeSeconds","newRating","RatingDisplay","users","id","map","user","key","undefined","UsersForm","setHandles","submitAct","onSubmit","value","onChange","e","target","App","useState","setUsers","event","preventDefault","handlesForURL","replaceAll","response","getUserData","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.69b7d2af.chunk.js","sourcesContent":["import { Line } from 'react-chartjs-2';\nimport React from 'react'\nimport 'chartjs-adapter-date-fns'\nimport { Chart } from 'chart.js';\nimport Zoom from 'chartjs-plugin-zoom';\n\nChart.register(Zoom)\nconst options = {\n    scales: {\n        x: {\n            type: 'time',\n            \n            time: {\n                unit: 'month'\n            },\n            grid: {\n                display: false\n            }\n\n        },\n        // grid: {\n        //     drawTicks: false\n        // }\n    },\n    plugins: {\n        zoom: {\n            zoom: {\n                wheel: {\n                  enabled: true,\n                },\n                pinch: {\n                  enabled: true\n                },\n                mode: 'xy',\n            },\n            pan: {\n                enabled: true,\n                mode: 'xy'\n            },\n            limits: {\n                x: {min: 1262353464000, max: Date.now(), minRange: 50},\n                y: {min: 0, max: 5000, minRange: 50}\n            },\n        }\n    }\n};\n\nconst RatingGraph = ({datasets, progress}) => {\n    if (datasets.length===0) {\n        if (progress.total===0) return (<></>)\n        return (<div className='rating'>\n            <h2>Fetching rating changes {progress.done}/{progress.total}</h2>\n        </div>)\n    }\n    const data = {\n        datasets: datasets,\n    };\n    return (\n    <div className='rating'>\n        <div className='header'>\n            <h1 className='title'>Rating Changes</h1>\n        </div>\n        <Line data={data}  options={options} plugins={[Zoom]} width={900} height={400} />\n    </ div>\n)};\n\nexport default RatingGraph","export const URL_INFO = \"https://codeforces.com/api/user.info?handles=\";\nexport const URL_rating = \"https://codeforces.com/api/user.rating?handle=\"\n\n\nconst fetch_retry = async (url, n) => {\n    for (let i = 0; i < n; i++) {\n        let resp = await fetch(url)\n        if (resp.ok) return resp.json()\n        if (resp.status===400) return Promise.reject(new Error(\"Invalid handles!\"))\n    }\n    return Promise.reject(new Error(`still failed after ${n} times of trying`));\n};\n\nexport const getUserData = (handles, setUsers) => {\n    setUsers([])\n    let handlesForURL = handles.replaceAll(\"\\n\", \";\")\n    fetch(URL_INFO + handlesForURL)\n        .then(response => {\n            if (response.ok) return response.json()\n            else if (response.status===400) {\n                return Promise.reject(new Error(\"Invalid handles!\"))\n            }\n        })\n        .then(data => {\n            // console.log(data.result)\n            setUsers(data.result)\n        }, (result) => {\n            console.error(result)\n        })\n}\n\n\nexport const getRatings = async (handlesStr, setDatasets, setProgress) => {\n    let ratings = []\n    let invalidHandles = []\n    const handles = handlesStr.split('\\n')\n    setDatasets([])\n    setProgress({ done: 0, total: handles.length })\n    let cnt=0\n    for (const handle of handles) {\n        await fetch_retry(URL_rating + handle, 10)\n            .then(data => {\n              ratings.push(data.result)\n            }, (result) => {\n                invalidHandles.push(handle)\n                console.error(result)\n            })\n        cnt++\n        setProgress({ done: cnt, total: handles.length })\n    }\n    if (invalidHandles.length!==0) {\n        alert(`${invalidHandles.join(', ')} are invalid handle(s)!`)\n        setDatasets([])\n        return\n    }\n    // console.log(newRatings)\n    setDatasets(makeDataset(ratings))\n}\n\nconst colorSchemeOri = [\n    \"#25CCF7\",\"#FD7272\",\"#54a0ff\",\"#00d2d3\",\n    \"#1abc9c\",\"#2ecc71\",\"#3498db\",\"#9b59b6\",\"#34495e\",\n    \"#16a085\",\"#27ae60\",\"#2980b9\",\"#8e44ad\",\"#2c3e50\",\n    \"#f1c40f\",\"#e67e22\",\"#e74c3c\",\"#95a5a6\",\n    \"#f39c12\",\"#d35400\",\"#c0392b\",\"#bdc3c7\",\"#7f8c8d\",\n    \"#55efc4\",\"#81ecec\",\"#74b9ff\",\"#a29bfe\",\n    \"#00b894\",\"#00cec9\",\"#0984e3\",\"#6c5ce7\",\"#ffeaa7\",\n    \"#fab1a0\",\"#ff7675\",\"#fd79a8\",\"#fdcb6e\",\"#e17055\",\n    \"#d63031\",\"#feca57\",\"#5f27cd\",\"#54a0ff\",\"#01a3a4\"\n]\n\n\nconst makeDataset = (ratings) => {\n    const colorScheme = colorSchemeOri.slice()\n    const dataset = []\n    for (const rating of ratings) {\n        if (rating.length===0) continue;\n        const color = colorScheme.pop()\n        const data = {\n            // backgroundColor: color,\n            borderColor: color,\n            label: rating[0].handle,\n            data: [],\n            parsing: false\n        }\n        for (const contest of rating) {\n            data.data.push({\n                x: contest.ratingUpdateTimeSeconds*1000,\n                y: contest.newRating\n            })\n        }\n        dataset.push(data)\n    }\n    // console.log(dataset)\n    return dataset\n}\n\nexport function ratingToColor(rating) {\n    if (rating === undefined) return 'user-black'\n    if (rating < 1200) return 'user-gray'\n    if (rating < 1400) return 'user-green'\n    if (rating < 1600) return 'user-cyan'\n    if (rating < 1900) return 'user-blue'\n    if (rating < 2100) return 'user-violet'\n    if (rating < 2300) return 'user-orange'\n    if (rating < 2400) return 'user-yellow'\n    if (rating < 2600) return 'user-fire'\n    if (rating < 3000) return 'user-red'\n    return 'user-legendary'\n}\n\n// vim:tabstop=2:shiftwidth=2","import { ratingToColor } from './utils';\nimport React from 'react';\n\nexport const RatingDisplay = ({ users }) => { // component that displays the current ratings\n  return (\n    <ul className='rating' id='rating-display'>\n      {users.map((user) => (\n        <li key={user.handle}>\n        <h3 className={ratingToColor(user.rating)}>\n          {user.handle} {user.rating}\n        </h3>\n        </li>\n      ))}\n    </ul>\n    // <textarea name=\"ratings\" id=\"ratings\" cols=\"30\" rows=\"10\" readOnly>\n    // {users.map((user) => (\n    //   <h3 className={ratingToColor(user.rating)}>\n    //     {user.handle} {user.rating}\n    //   </h3>\n    // ))}\n    // </textarea>\n  )\n}","import './App.css';\nimport React, { useState } from 'react'\nimport RatingGraph from './graph.js'\nimport { RatingDisplay } from './rating-display';\nimport { getRatings, getUserData } from './utils';\n\nconst UsersForm = ({ handles, setHandles, submitAct }) => {\n  return (\n    <form onSubmit={submitAct} className='form'>\n      <div className='input-div'>\n        <textarea className='input' value={handles} onChange={e => setHandles(e.target.value)} />\n      </div>\n      <div>\n        <button type=\"submit\">go</button>\n      </div>\n    </form>\n  )\n}\n\n\n\nconst App = () => {\n  const [handles, setHandles] = useState(\"\")\n  const [users, setUsers] = useState([])\n  const [datasets, setDatasets] = useState([])\n  const [progress, setProgress] = useState({\n    done:0,\n    total:0\n  })\n  const makeGraph = (event) => {\n    event.preventDefault()\n    getUserData(handles, setUsers)\n    getRatings(handles, setDatasets, setProgress)\n  }\n  return (\n    <div>\n      <UsersForm handles={handles} setHandles={setHandles} submitAct={makeGraph} />\n      <RatingDisplay users={users} />\n      <RatingGraph datasets={datasets} progress={progress}/>\n    </div>\n  )\n}\n\nexport default App;\n// vim:tabstop=2:shiftwidth=2\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}